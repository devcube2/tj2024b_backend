* 참고 : 자바의 이름 짓기 규약
	- 패키지/폴더명은 모두 소문자로 한다.
	- 클래스명은 첫글자를 대문자로 시작한다.
	- 변수명/함수명은 첫글자를 소문자로 시작하고 중간에 새단어의 첫글자를 대문자로 한다.
		- 카멜 표기법 사용한다.
	- 객체명/배열명 : 존재하지 않는다.
		타입 변수명 = 객체 		* 관례적으로 객체를 참조하는 변수는 객체변수라고 한다.
		타입[] 변수명 = 배열	* 관례적으로 객체를 참조하는 변수는 배열변수라고 한다.
		
[변수 유형에 따른 용도]
	1. 지역변수
		- 설명 : 특정한 { } 안에서 선언 한 변수
		- 선언: 함수 내부에서 선언
		- 범위 : 선언된 특정한 { } 내부에서만 사용
		- 메모리 : 스택 메모리
		- 생성소멸 : 함수가 실행 될때 생성되고 함수가 종료될때 소멸된다.
	
	2. 매개변수
		- 설명 : 함수 호출시 함수에게 전달하는 것을 대입받는 변수
		- 선언 : 함수 선언시 함수명(타입 매개변수 , 타입 매개변수) { }
		- 범위/메모리/생성소멸은 지역변수와 같다.		
	
	3. 멤버변수
		- 설명 : 클래스 { } 이고 함수 { } 밖에서 선언된 변수 , 객체의 속성/특성
		- 선언 : 객체 멤버 변수로 선언
		- 범위 : private 이면 현재 클래스에서만 사용하고 아니면 다른 클래스에서 사용이 가능하다.
		- 메모리 : 힙 메모리
		- 생성소멸 : 인스턴스가 생성될때 힙에 생성되고 , GC가 메모리 수거할때 소멸된다. * 수거기준 : 참조가 없는 인스턴스
	
	4. static 변수
		- 설명 : 프로그램 전체에서 사용되는 변수 , 주료 전역변수로 사용
		- 선언 : static 예약어를 사용하여 클래스 내부에 선언
		- 범위 : private 이면 현재 클래스에서만 사용하고 아니면 다른 클래스에서 사용이 가능하다.
		- 메모리 : 데이터 영역
		- 생성소멸 : 프로그램이 처음 시작할때 상수 와 함께 데이터 영역에 생성되고 프로그램이 끝나면 메모리가 소멸된다.
		
[ 상속 ]
	1. 부모로부터 자식이나 손자까지 물려주는 행위
	2. 부모클래스/상위클래스 , 자식클래스/하위클래스
	3. extends 키워드 , '연장,확장하다'
			class 하위클래스 extends 상위클래스 { }
	4. 예]
			포유류(고래, 원숭이 등등) <---- 일반적인 개념
			|
			v
			사람					  <---- 구체적인 개념
	5. 목적 : 특정 클래스의 멤버변수 나 메소드를 물려받아 클래스 빠른 설계
	6. 장점 : 1. 유지보수 2. 계층구조파악 3. 재사용성 4. *다형성*
	7. 하위클래스가 상위클래스의 멤버변수, 메소드를 사용할 수 있다.
		---> 단] 현실세계와 다르게 하위클래스가 상위클래스를 선택한다.
	8. 타입변환 ? 
		0. 타입이란 ? 자료 속성의 분류    
		1. 자동(묵시적)타입변환 :
			- 작은 타입에서 큰 타입으로 기본 타입이 변환 , 큰 타입이 메모리적으로 더 크니까 , 데이터의 표현 범위가 더 크다
			- byte -> short -> int -> long -> float -> double
		2. 강제(명시적)타입변환 , 캐스팅 : ()
			[ 기본타입 ]
			- 큰 타입에서 작은 타입으로 기본 타입이 변환 , 작은 타입이 메모리적으로 더 작으니까 손실 , 데이터의 표현 범위가 더 작다.
			- double -> float -> long -> int -> short -> byte
			[ 참조타입 ]
			- 상위클래스(타입) 에서 하위클래스(타입)으로 변환이 불가능하다. 가능한 전제조건이 있다.
			- 가능한 전제조건 : 인스턴스(객체)가 본래 변환할 타입으로 생성된 경우에는 가능하다. 
	[ 물리적인 설계 ]
	9. ***** 하위클래스가 객체(인스턴스) 생성하면 상위클래스의 객체(인스턴스)도 같이 메모리 할당 *****
		즉] 하위클래스는 부모클래스 없이 인스턴스를 생성할 수 없다.
	[ 논리적인 설계 ]
	10. Object 클래스 이란? 자바회사에서 내부적으로 모든 클래스는 Object 클래스로부터 상속 받도록 설계
		즉] 내가 만든 클래스와 자바의 모든 클래스는 Object 클래스로부터 상속받는다. 자바는 100% 상속		
		
[인터페이스]
	1. 정의 : 서로 다른 시스템이나 장치 사이에서 정보를 주고 받는 접점이나 경계면
	2. 생활속 예] 키보드, 핸드폰, 키오스크, 리모컨
		1. 삼성TV , LGTV 등등 서로 다른 회사의 TV들을 하나의 리모컨으로 조작한다.
		2. [오락실] 서로 다른 여러 게임들을 하나의 게임기 기계로 조작한다.
		3. [컴퓨터] 서로 다른 프로그램/게임 들을 하나의 키보드 에서 조작한다. 
			- 사냥게임 에서는 A키를 누르면 공격
			- 축구게임 에서는 A키를 누르면 슛
	3. 목적 : 서로 다른 장치 사이에 동일한 목적으로 기능을 서로 다르게 작동
		-> 자바 : 서로 다른 클래스들의 동일한 목적으로 서로 다른 메소드를 실행한다.
	4. 다형성 : 다양한 형식/형태/모양/*(타입)를 갖는 성질
		-> 자바 : 개발 코드와 객체가 서로 통신하는 접점 역활
	5. 특징
		1. 객체의 교환성을 높이기 위해 다형성으로 구현
		2. 서로 다른 클래스들 사이에 중간 매개역활
	
	6. 인터페이스 만드는 방법
		1. 패키지 오른쪽 클릭
		2. [NEW] -> [interface]
		3. 인터페이스 name 임의로 작성 : 첫글자를 대문자 작성
	
	7. 인터페이스 구성 멤버
		1. 상수
			public static final 타입 상수명 = 초기값;
			1. public static final 생략이 가능하다.
			2. 상수 이므로 초기값이 필수이다.
		2. 추상메소드
			abstract 타입 메소드명(타입 매개변수명);
			1. abstract 생략이 가능하다.
			2. { } 를 작성하지 않는다.
				추상이란 : 메소드의 구체적인 기능을 선언하지 않는다.
	vs 클래스 구성멤버
		1. 멤버변수(static)
		2. 생성자
		3. 메소드
	
	* 추상 : 여러가지 사물이나 개념에서 공통되는 특성이나 속성 따위를 추출 파악